var url = "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/significant_month.geojson";

// Perform a GET request to the query URL
d3.json(url, function (data) {
  // Once we get a response, send the data.features object to the createFeatures function
  createFeatures(data.features);
});
function createFeatures(earthquakeData){
  // Define a function we want to run once for each feature in the features array
  // Give each feature a popup describing the place and time of the earthquake
  function
  onEachFeature(feature, layer) {
    layer.bindPopup("<h3>" + features.properties.place+
      "</h3><hr><p>" + new Date(features.properties.time) + "</p>");
  };
  // Create a GeoJSON layer containing the features array on the earthquakeData object
  // Run the onEachFeature function once for each piece of data in the array
  var earthquakes = L.geoJSON(data, {
    onEachFeature: onEachFeature,
    pointToLayer: createCircleMarker
  });

  // Sending our earthquakes layer to the createMap function
  createMap(earthquakes);

  function createMap(earthquakes) {

    // Define streetmap and darkmap layers
    var streetmap = L.tileLayer("https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}", {
      attribution: "© <a href='https://www.mapbox.com/about/maps/'>Mapbox</a> © <a href='http://www.openstreetmap.org/copyright'>OpenStreetMap</a> <strong><a href='https://www.mapbox.com/map-feedback/' target='_blank'>Improve this map</a></strong>",
      tileSize: 512,
      maxZoom: 18,
      zoomOffset: -1,
      id: "mapbox/streets-v11",
      accessToken: API_KEY
    });

    var darkmap = L.tileLayer("https://api.mapbox.com/styles/v1/mapbox/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}", {
      attribution: "Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>",
      maxZoom: 18,
      id: "dark-v10",
      accessToken: API_KEY
    });

    // Define a baseMaps object to hold our base layers
    var baseMaps = {
      "Street Map": streetmap,
      "Dark Map": darkmap
    };

    // Create overlay object to hold our overlay layer
    var overlayMaps = {
      Earthquakes: earthquakes
    };

    // Create our map, giving it the streetmap and earthquakes layers to display on load
    var map = L.map("map", {
      center: [
        0.000, -30.00
      ],
      zoom: 1,
      layers: [baseMaps, overlayMaps],
    });

    // Create markers
    // This will make our marker's size proportionate to its magnitude
    function markerSize(mag) {
      if (mag <= 1) {
        return(1);
      } else if ((mag > 1) && (mag <= 2)) {
        return(3);
      } else if ((mag > 2) && (mag <= 3)) {
        return(6);
      } else if ((mag > 3) && (mag <= 4)) {
        return(12);
      } else if ((mag > 4) && (mag <= 5)) {
        return(24);
      } else {
        return(48);
      };
    };
    function markerColor(depth) {
      if (depth <= 1) {
        return("limegreen");
      } else if ((depth > 1) && (depth <= 2)) {
        return("yellowgreen");
      } else if ((depth > 2) && (depth <= 3)) {
        return("orange");
      } else if ((depth > 3) && (depth <= 4)) {
        return("darkorange");
      } else if ((depth > 4) && (depth <= 5)) {
        return("chocolate");
      } else {
        return("darkred");
      };
    };
    function createCircleMarker(features) {
      return new L.CircleMarker(data.coordinates, {
        radius: markerSize(feature.properties.mag),
       color: markerColor(feature.properties.depth[2]),
        fillOpacity: 0.85,
        draggable: false,
       title: "First Marker",
    });
    // Add the layer control to the map
    L.control.layers(baseMaps, overlayMaps, marker, {
      collapsed: true
    }).addTo(map);
  };
};